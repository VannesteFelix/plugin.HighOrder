%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: mardi 25 mars 2014 17 h 51 CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
35.0000 -1.00000 347.981 390.000 rc
0.470588 0 0.0549020 RG
newpath
36.0000 322.089 m
41.1667 325.934 l
42.9533 327.261 l
44.7313 328.581 l
46.3798 329.802 l
48.0868 331.064 l
49.8521 332.365 l
51.6117 333.659 l
53.4218 334.986 l
55.0160 336.151 l
56.8108 337.457 l
58.6129 338.763 l
60.3496 340.016 l
61.9267 341.148 l
63.8020 342.487 l
65.3906 343.615 l
67.2386 344.920 l
68.8743 346.067 l
70.6690 347.316 l
72.3779 348.498 l
74.1611 349.721 l
75.7985 350.835 l
77.5647 352.027 l
79.3993 353.253 l
80.9964 354.310 l
82.7212 355.441 l
84.5031 356.597 l
86.2464 357.716 l
87.9331 358.786 l
89.8059 359.959 l
91.4886 361.000 l
93.2854 362.097 l
94.9135 363.077 l
96.6934 364.133 l
98.3682 365.113 l
100.118 366.120 l
101.830 367.090 l
103.622 368.087 l
105.348 369.030 l
107.113 369.976 l
108.863 370.897 l
110.471 371.726 l
112.314 372.656 l
113.963 373.469 l
115.721 374.316 l
117.403 375.108 l
119.271 375.964 l
120.889 376.685 l
122.725 377.482 l
124.398 378.186 l
126.229 378.932 l
127.808 379.555 l
129.607 380.242 l
131.344 380.881 l
133.081 381.495 l
134.811 382.082 l
136.472 382.622 l
138.269 383.180 l
139.981 383.686 l
141.783 384.191 l
143.415 384.623 l
145.218 385.072 l
146.944 385.474 l
148.667 385.847 l
150.466 386.207 l
152.124 386.511 l
153.821 386.794 l
155.695 387.073 l
157.392 387.295 l
159.127 387.492 l
160.891 387.659 l
162.513 387.785 l
164.243 387.887 l
165.958 387.957 l
167.794 387.996 l
169.414 388.000 l
171.283 387.967 l
172.969 387.903 l
174.638 387.807 l
176.432 387.667 l
178.234 387.489 l
179.873 387.293 l
181.614 387.049 l
183.313 386.775 l
185.154 386.437 l
186.748 386.110 l
188.578 385.695 l
190.298 385.266 l
192.002 384.802 l
193.707 384.300 l
195.446 383.748 l
197.290 383.119 l
198.980 382.501 l
200.649 381.852 l
202.432 381.116 l
204.212 380.337 l
205.810 379.599 l
207.702 378.678 l
209.285 377.868 l
211.137 376.873 l
212.905 375.876 l
214.483 374.947 l
216.258 373.857 l
218.044 372.711 l
219.822 371.522 l
221.471 370.376 l
223.178 369.145 l
224.943 367.823 l
226.703 366.455 l
228.513 364.996 l
230.107 363.668 l
231.902 362.122 l
233.704 360.516 l
235.440 358.917 l
237.018 357.421 l
238.893 355.587 l
240.481 353.987 l
242.329 352.070 l
243.965 350.324 l
245.760 348.354 l
247.469 346.425 l
249.252 344.357 l
250.889 342.407 l
252.656 340.249 l
254.490 337.948 l
256.087 335.894 l
257.812 333.622 l
259.594 331.216 l
261.337 328.805 l
263.024 326.417 l
264.897 323.701 l
266.580 321.203 l
268.376 318.476 l
270.004 315.949 l
271.784 313.127 l
273.459 310.414 l
275.210 307.518 l
276.921 304.626 l
278.713 301.536 l
280.439 298.497 l
282.204 295.325 l
283.954 292.116 l
285.562 289.111 l
287.406 285.599 l
289.054 282.397 l
290.812 278.919 l
292.494 275.528 l
294.363 271.691 l
295.980 268.307 l
297.816 264.396 l
299.490 260.767 l
301.320 256.725 l
302.899 253.178 l
304.698 249.070 l
306.436 245.032 l
308.172 240.927 l
309.902 236.769 l
311.564 232.709 l
313.360 228.248 l
315.073 223.926 l
316.875 219.302 l
318.506 215.050 l
320.309 210.277 l
322.036 205.632 l
323.758 200.927 l
325.558 195.935 l
327.215 191.268 l
328.912 186.417 l
330.786 180.979 l
332.483 175.980 l
334.218 170.793 l
335.983 165.440 l
337.605 160.450 l
339.334 155.057 l
341.050 149.629 l
342.885 143.739 l
344.505 138.469 l
346.374 132.303 l
348.060 126.661 l
349.729 121.004 l
351.523 114.839 l
353.325 108.562 l
354.964 102.776 l
356.705 96.5522 l
358.404 90.3991 l
360.245 83.6402 l
361.839 77.7169 l
363.669 70.8276 l
365.389 64.2668 l
367.093 57.6882 l
368.798 51.0231 l
370.538 44.1409 l
372.381 36.7525 l
374.071 29.8933 l
375.740 23.0424 l
377.524 15.6305 l
379.303 8.14331 l
380.981 1.00000 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
36.0000 322.089 m
380.981 322.089 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
199 343 19 15 rc
newpath
204.093 349.406 m
208.125 349.406 l
208.125 349.562 l
203.734 354.140 l
205.593 354.140 l
206.031 354.140 206.309 354.122 206.429 354.085  c
206.549 354.049 206.658 353.976 206.757 353.867  c
206.856 353.757 206.968 353.557 207.093 353.265  c
207.328 353.265 l
206.765 355.000 l
202.640 355.000 l
202.640 354.812 l
207.031 350.250 l
205.203 350.250 l
204.817 350.250 204.583 350.260 204.500 350.281  c
204.385 350.302 204.270 350.367 204.156 350.476  c
204.041 350.585 203.921 350.765 203.796 351.015  c
203.546 351.015 l
204.093 349.406 l
h
213.481 346.218 m
211.449 353.328 l
211.324 353.744 211.262 354.046 211.262 354.234  c
211.262 354.390 211.316 354.510 211.426 354.593  c
211.535 354.677 211.788 354.734 212.184 354.765  c
212.121 355.000 l
208.856 355.000 l
208.934 354.765 l
209.288 354.755 209.517 354.729 209.621 354.687  c
209.798 354.604 209.934 354.500 210.027 354.375  c
210.163 354.177 210.303 353.828 210.449 353.328  c
211.918 348.218 l
212.012 347.906 212.064 347.729 212.074 347.687  c
212.085 347.604 212.090 347.520 212.090 347.437  c
212.090 347.291 212.051 347.177 211.973 347.093  c
211.895 347.010 211.783 346.968 211.637 346.968  c
211.533 346.968 211.361 346.994 211.121 347.046  c
211.043 346.812 l
213.184 346.218 l
213.481 346.218 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
36.0000 322.089 m
36.0000 326.089 l
S
Q
q
0 w
newpath
150.993 322.089 m
150.993 326.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
147.468 340.750 m
147.468 339.770 147.617 338.924 147.914 338.210  c
148.210 337.497 148.604 336.968 149.093 336.625  c
149.479 336.354 149.875 336.218 150.281 336.218  c
150.937 336.218 151.526 336.552 152.046 337.218  c
152.703 338.052 153.031 339.182 153.031 340.609  c
153.031 341.609 152.888 342.458 152.601 343.156  c
152.315 343.854 151.947 344.362 151.500 344.679  c
151.052 344.997 150.625 345.156 150.218 345.156  c
149.395 345.156 148.708 344.671 148.156 343.703  c
147.697 342.880 147.468 341.895 147.468 340.750  c
h
148.718 340.906 m
148.718 342.093 148.864 343.062 149.156 343.812  c
149.395 344.437 149.755 344.750 150.234 344.750  c
150.463 344.750 150.700 344.648 150.945 344.445  c
151.190 344.242 151.375 343.895 151.500 343.406  c
151.697 342.687 151.796 341.661 151.796 340.328  c
151.796 339.349 151.692 338.531 151.484 337.875  c
151.338 337.385 151.140 337.041 150.890 336.843  c
150.724 336.708 150.515 336.640 150.265 336.640  c
149.984 336.640 149.729 336.765 149.500 337.015  c
149.197 337.369 148.992 337.924 148.882 338.679  c
148.773 339.434 148.718 340.177 148.718 340.906  c
h
155.125 343.765 m
155.322 343.765 155.489 343.835 155.625 343.976  c
155.760 344.117 155.828 344.281 155.828 344.468  c
155.828 344.666 155.760 344.833 155.625 344.968  c
155.489 345.104 155.322 345.171 155.125 345.171  c
154.927 345.171 154.760 345.104 154.625 344.968  c
154.489 344.833 154.421 344.666 154.421 344.468  c
154.421 344.270 154.489 344.104 154.625 343.968  c
154.760 343.833 154.927 343.765 155.125 343.765  c
h
162.390 336.390 m
161.890 337.468 l
159.312 337.468 l
158.750 338.625 l
159.864 338.791 160.750 339.208 161.406 339.875  c
161.968 340.447 162.250 341.125 162.250 341.906  c
162.250 342.364 162.158 342.786 161.976 343.171  c
161.794 343.557 161.562 343.885 161.281 344.156  c
161.000 344.427 160.687 344.640 160.343 344.796  c
159.864 345.036 159.364 345.156 158.843 345.156  c
158.333 345.156 157.960 345.067 157.726 344.890  c
157.492 344.713 157.375 344.520 157.375 344.312  c
157.375 344.187 157.424 344.080 157.523 343.992  c
157.622 343.903 157.744 343.859 157.890 343.859  c
157.994 343.859 158.088 343.875 158.171 343.906  c
158.255 343.937 158.395 344.026 158.593 344.171  c
158.916 344.390 159.239 344.500 159.562 344.500  c
160.062 344.500 160.497 344.312 160.867 343.937  c
161.237 343.562 161.421 343.104 161.421 342.562  c
161.421 342.041 161.255 341.557 160.921 341.109  c
160.588 340.661 160.130 340.312 159.546 340.062  c
159.078 339.875 158.447 339.765 157.656 339.734  c
159.312 336.390 l
162.390 336.390 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
265.987 322.089 m
265.987 326.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
268.531 337.234 m
270.625 336.218 l
270.828 336.218 l
270.828 343.484 l
270.828 343.963 270.849 344.263 270.890 344.382  c
270.932 344.502 271.015 344.593 271.140 344.656  c
271.265 344.718 271.520 344.755 271.906 344.765  c
271.906 345.000 l
268.671 345.000 l
268.671 344.765 l
269.078 344.755 269.341 344.718 269.460 344.656  c
269.580 344.593 269.664 344.510 269.710 344.406  c
269.757 344.302 269.781 343.994 269.781 343.484  c
269.781 338.843 l
269.781 338.208 269.760 337.802 269.718 337.625  c
269.687 337.489 269.632 337.390 269.554 337.328  c
269.476 337.265 269.380 337.234 269.265 337.234  c
269.109 337.234 268.895 337.302 268.625 337.437  c
268.531 337.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
380.981 322.089 m
380.981 326.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
378.531 337.234 m
380.625 336.218 l
380.828 336.218 l
380.828 343.484 l
380.828 343.963 380.849 344.263 380.890 344.382  c
380.932 344.502 381.015 344.593 381.140 344.656  c
381.265 344.718 381.520 344.755 381.906 344.765  c
381.906 345.000 l
378.671 345.000 l
378.671 344.765 l
379.078 344.755 379.341 344.718 379.460 344.656  c
379.580 344.593 379.664 344.510 379.710 344.406  c
379.757 344.302 379.781 343.994 379.781 343.484  c
379.781 338.843 l
379.781 338.208 379.760 337.802 379.718 337.625  c
379.687 337.489 379.632 337.390 379.554 337.328  c
379.476 337.265 379.380 337.234 379.265 337.234  c
379.109 337.234 378.895 337.302 378.625 337.437  c
378.531 337.234 l
h
385.125 343.765 m
385.322 343.765 385.489 343.835 385.625 343.976  c
385.760 344.117 385.828 344.281 385.828 344.468  c
385.828 344.666 385.760 344.833 385.625 344.968  c
385.489 345.104 385.322 345.171 385.125 345.171  c
384.927 345.171 384.760 345.104 384.625 344.968  c
384.489 344.833 384.421 344.666 384.421 344.468  c
384.421 344.270 384.489 344.104 384.625 343.968  c
384.760 343.833 384.927 343.765 385.125 343.765  c
h
392.390 336.390 m
391.890 337.468 l
389.312 337.468 l
388.750 338.625 l
389.864 338.791 390.750 339.208 391.406 339.875  c
391.968 340.447 392.250 341.125 392.250 341.906  c
392.250 342.364 392.158 342.786 391.976 343.171  c
391.794 343.557 391.562 343.885 391.281 344.156  c
391.000 344.427 390.687 344.640 390.343 344.796  c
389.864 345.036 389.364 345.156 388.843 345.156  c
388.333 345.156 387.960 345.067 387.726 344.890  c
387.492 344.713 387.375 344.520 387.375 344.312  c
387.375 344.187 387.424 344.080 387.523 343.992  c
387.622 343.903 387.744 343.859 387.890 343.859  c
387.994 343.859 388.088 343.875 388.171 343.906  c
388.255 343.937 388.395 344.026 388.593 344.171  c
388.916 344.390 389.239 344.500 389.562 344.500  c
390.062 344.500 390.497 344.312 390.867 343.937  c
391.237 343.562 391.421 343.104 391.421 342.562  c
391.421 342.041 391.255 341.557 390.921 341.109  c
390.588 340.661 390.130 340.312 389.546 340.062  c
389.078 339.875 388.447 339.765 387.656 339.734  c
389.312 336.390 l
392.390 336.390 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
58.9987 322.089 m
58.9987 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
81.9975 322.089 m
81.9975 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
104.996 322.089 m
104.996 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
127.995 322.089 m
127.995 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
173.992 322.089 m
173.992 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
196.991 322.089 m
196.991 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
219.990 322.089 m
219.990 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
242.989 322.089 m
242.989 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
288.986 322.089 m
288.986 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
311.985 322.089 m
311.985 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
334.984 322.089 m
334.984 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
357.983 322.089 m
357.983 324.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
q
0 J
1 j
newpath
36.0000 388.000 m
36.0000 1.00000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
1 154 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
36.0000 322.089 m
32.0000 322.089 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
28.4687 327.750 m
28.4687 326.770 28.6171 325.924 28.9140 325.210  c
29.2109 324.497 29.6041 323.968 30.0937 323.625  c
30.4791 323.354 30.8750 323.218 31.2812 323.218  c
31.9375 323.218 32.5260 323.552 33.0468 324.218  c
33.7031 325.052 34.0312 326.182 34.0312 327.609  c
34.0312 328.609 33.8880 329.458 33.6015 330.156  c
33.3151 330.854 32.9479 331.362 32.5000 331.679  c
32.0520 331.997 31.6250 332.156 31.2187 332.156  c
30.3958 332.156 29.7083 331.671 29.1562 330.703  c
28.6979 329.880 28.4687 328.895 28.4687 327.750  c
h
29.7187 327.906 m
29.7187 329.093 29.8645 330.062 30.1562 330.812  c
30.3958 331.437 30.7552 331.750 31.2343 331.750  c
31.4635 331.750 31.7005 331.648 31.9453 331.445  c
32.1901 331.242 32.3750 330.895 32.5000 330.406  c
32.6979 329.687 32.7968 328.661 32.7968 327.328  c
32.7968 326.349 32.6927 325.531 32.4843 324.875  c
32.3385 324.385 32.1406 324.041 31.8906 323.843  c
31.7239 323.708 31.5156 323.640 31.2656 323.640  c
30.9843 323.640 30.7291 323.765 30.5000 324.015  c
30.1979 324.369 29.9921 324.924 29.8828 325.679  c
29.7734 326.434 29.7187 327.177 29.7187 327.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 253.590 m
32.0000 253.590 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.4687 258.750 m
18.4687 257.770 18.6171 256.924 18.9140 256.210  c
19.2109 255.497 19.6041 254.968 20.0937 254.625  c
20.4791 254.354 20.8750 254.218 21.2812 254.218  c
21.9375 254.218 22.5260 254.552 23.0468 255.218  c
23.7031 256.052 24.0312 257.182 24.0312 258.609  c
24.0312 259.609 23.8880 260.458 23.6015 261.156  c
23.3151 261.854 22.9479 262.362 22.5000 262.679  c
22.0520 262.997 21.6250 263.156 21.2187 263.156  c
20.3958 263.156 19.7083 262.671 19.1562 261.703  c
18.6979 260.880 18.4687 259.895 18.4687 258.750  c
h
19.7187 258.906 m
19.7187 260.093 19.8645 261.062 20.1562 261.812  c
20.3958 262.437 20.7552 262.750 21.2343 262.750  c
21.4635 262.750 21.7005 262.648 21.9453 262.445  c
22.1901 262.242 22.3750 261.895 22.5000 261.406  c
22.6979 260.687 22.7968 259.661 22.7968 258.328  c
22.7968 257.349 22.6927 256.531 22.4843 255.875  c
22.3385 255.385 22.1406 255.041 21.8906 254.843  c
21.7239 254.708 21.5156 254.640 21.2656 254.640  c
20.9843 254.640 20.7291 254.765 20.5000 255.015  c
20.1979 255.369 19.9921 255.924 19.8828 256.679  c
19.7734 257.434 19.7187 258.177 19.7187 258.906  c
h
26.1250 261.765 m
26.3229 261.765 26.4895 261.835 26.6250 261.976  c
26.7604 262.117 26.8281 262.281 26.8281 262.468  c
26.8281 262.666 26.7604 262.833 26.6250 262.968  c
26.4895 263.104 26.3229 263.171 26.1250 263.171  c
25.9270 263.171 25.7604 263.104 25.6250 262.968  c
25.4895 262.833 25.4218 262.666 25.4218 262.468  c
25.4218 262.270 25.4895 262.104 25.6250 261.968  c
25.7604 261.833 25.9270 261.765 26.1250 261.765  c
h
33.7031 261.343 m
33.1093 263.000 l
28.0312 263.000 l
28.0312 262.765 l
29.5208 261.401 30.5703 260.286 31.1796 259.421  c
31.7890 258.557 32.0937 257.770 32.0937 257.062  c
32.0937 256.510 31.9270 256.059 31.5937 255.710  c
31.2604 255.362 30.8593 255.187 30.3906 255.187  c
29.9739 255.187 29.5963 255.309 29.2578 255.554  c
28.9192 255.799 28.6718 256.161 28.5156 256.640  c
28.2812 256.640 l
28.3854 255.859 28.6562 255.260 29.0937 254.843  c
29.5312 254.427 30.0781 254.218 30.7343 254.218  c
31.4322 254.218 32.0156 254.442 32.4843 254.890  c
32.9531 255.338 33.1875 255.864 33.1875 256.468  c
33.1875 256.906 33.0833 257.343 32.8750 257.781  c
32.5625 258.468 32.0572 259.192 31.3593 259.953  c
30.3072 261.109 29.6458 261.807 29.3750 262.046  c
31.6250 262.046 l
32.0833 262.046 32.4036 262.028 32.5859 261.992  c
32.7682 261.955 32.9349 261.885 33.0859 261.781  c
33.2369 261.677 33.3645 261.531 33.4687 261.343  c
33.7031 261.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 185.091 m
32.0000 185.091 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.4687 190.750 m
18.4687 189.770 18.6171 188.924 18.9140 188.210  c
19.2109 187.497 19.6041 186.968 20.0937 186.625  c
20.4791 186.354 20.8750 186.218 21.2812 186.218  c
21.9375 186.218 22.5260 186.552 23.0468 187.218  c
23.7031 188.052 24.0312 189.182 24.0312 190.609  c
24.0312 191.609 23.8880 192.458 23.6015 193.156  c
23.3151 193.854 22.9479 194.362 22.5000 194.679  c
22.0520 194.997 21.6250 195.156 21.2187 195.156  c
20.3958 195.156 19.7083 194.671 19.1562 193.703  c
18.6979 192.880 18.4687 191.895 18.4687 190.750  c
h
19.7187 190.906 m
19.7187 192.093 19.8645 193.062 20.1562 193.812  c
20.3958 194.437 20.7552 194.750 21.2343 194.750  c
21.4635 194.750 21.7005 194.648 21.9453 194.445  c
22.1901 194.242 22.3750 193.895 22.5000 193.406  c
22.6979 192.687 22.7968 191.661 22.7968 190.328  c
22.7968 189.349 22.6927 188.531 22.4843 187.875  c
22.3385 187.385 22.1406 187.041 21.8906 186.843  c
21.7239 186.708 21.5156 186.640 21.2656 186.640  c
20.9843 186.640 20.7291 186.765 20.5000 187.015  c
20.1979 187.369 19.9921 187.924 19.8828 188.679  c
19.7734 189.434 19.7187 190.177 19.7187 190.906  c
h
26.1250 193.765 m
26.3229 193.765 26.4895 193.835 26.6250 193.976  c
26.7604 194.117 26.8281 194.281 26.8281 194.468  c
26.8281 194.666 26.7604 194.833 26.6250 194.968  c
26.4895 195.104 26.3229 195.171 26.1250 195.171  c
25.9270 195.171 25.7604 195.104 25.6250 194.968  c
25.4895 194.833 25.4218 194.666 25.4218 194.468  c
25.4218 194.270 25.4895 194.104 25.6250 193.968  c
25.7604 193.833 25.9270 193.765 26.1250 193.765  c
h
33.7968 191.828 m
33.7968 192.734 l
32.6406 192.734 l
32.6406 195.000 l
31.5937 195.000 l
31.5937 192.734 l
27.9531 192.734 l
27.9531 191.921 l
31.9531 186.218 l
32.6406 186.218 l
32.6406 191.828 l
33.7968 191.828 l
h
31.5937 191.828 m
31.5937 187.546 l
28.5781 191.828 l
31.5937 191.828 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 116.592 m
32.0000 116.592 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.4687 121.750 m
18.4687 120.770 18.6171 119.924 18.9140 119.210  c
19.2109 118.497 19.6041 117.968 20.0937 117.625  c
20.4791 117.354 20.8750 117.218 21.2812 117.218  c
21.9375 117.218 22.5260 117.552 23.0468 118.218  c
23.7031 119.052 24.0312 120.182 24.0312 121.609  c
24.0312 122.609 23.8880 123.458 23.6015 124.156  c
23.3151 124.854 22.9479 125.362 22.5000 125.679  c
22.0520 125.997 21.6250 126.156 21.2187 126.156  c
20.3958 126.156 19.7083 125.671 19.1562 124.703  c
18.6979 123.880 18.4687 122.895 18.4687 121.750  c
h
19.7187 121.906 m
19.7187 123.093 19.8645 124.062 20.1562 124.812  c
20.3958 125.437 20.7552 125.750 21.2343 125.750  c
21.4635 125.750 21.7005 125.648 21.9453 125.445  c
22.1901 125.242 22.3750 124.895 22.5000 124.406  c
22.6979 123.687 22.7968 122.661 22.7968 121.328  c
22.7968 120.349 22.6927 119.531 22.4843 118.875  c
22.3385 118.385 22.1406 118.041 21.8906 117.843  c
21.7239 117.708 21.5156 117.640 21.2656 117.640  c
20.9843 117.640 20.7291 117.765 20.5000 118.015  c
20.1979 118.369 19.9921 118.924 19.8828 119.679  c
19.7734 120.434 19.7187 121.177 19.7187 121.906  c
h
26.1250 124.765 m
26.3229 124.765 26.4895 124.835 26.6250 124.976  c
26.7604 125.117 26.8281 125.281 26.8281 125.468  c
26.8281 125.666 26.7604 125.833 26.6250 125.968  c
26.4895 126.104 26.3229 126.171 26.1250 126.171  c
25.9270 126.171 25.7604 126.104 25.6250 125.968  c
25.4895 125.833 25.4218 125.666 25.4218 125.468  c
25.4218 125.270 25.4895 125.104 25.6250 124.968  c
25.7604 124.833 25.9270 124.765 26.1250 124.765  c
h
33.5781 117.218 m
33.5781 117.453 l
33.0156 117.505 32.5572 117.614 32.2031 117.781  c
31.8489 117.947 31.5000 118.203 31.1562 118.546  c
30.8125 118.890 30.5286 119.273 30.3046 119.695  c
30.0807 120.117 29.8906 120.614 29.7343 121.187  c
30.3489 120.770 30.9635 120.562 31.5781 120.562  c
32.1614 120.562 32.6692 120.799 33.1015 121.273  c
33.5338 121.747 33.7500 122.359 33.7500 123.109  c
33.7500 123.828 33.5312 124.484 33.0937 125.078  c
32.5729 125.796 31.8802 126.156 31.0156 126.156  c
30.4218 126.156 29.9218 125.958 29.5156 125.562  c
28.7135 124.812 28.3125 123.833 28.3125 122.625  c
28.3125 121.854 28.4661 121.122 28.7734 120.429  c
29.0807 119.737 29.5208 119.119 30.0937 118.578  c
30.6666 118.036 31.2161 117.674 31.7421 117.492  c
32.2682 117.309 32.7552 117.218 33.2031 117.218  c
33.5781 117.218 l
h
29.6250 121.656 m
29.5520 122.229 29.5156 122.692 29.5156 123.046  c
29.5156 123.453 29.5911 123.893 29.7421 124.367  c
29.8932 124.841 30.1145 125.218 30.4062 125.500  c
30.6250 125.697 30.8906 125.796 31.2031 125.796  c
31.5677 125.796 31.8958 125.622 32.1875 125.273  c
32.4791 124.924 32.6250 124.432 32.6250 123.796  c
32.6250 123.067 32.4791 122.440 32.1875 121.914  c
31.8958 121.388 31.4895 121.125 30.9687 121.125  c
30.8020 121.125 30.6276 121.158 30.4453 121.226  c
30.2630 121.294 29.9895 121.437 29.6250 121.656  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 48.0930 m
32.0000 48.0930 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.4687 53.7500 m
18.4687 52.7708 18.6171 51.9244 18.9140 51.2109  c
19.2109 50.4974 19.6041 49.9687 20.0937 49.6250  c
20.4791 49.3541 20.8750 49.2187 21.2812 49.2187  c
21.9375 49.2187 22.5260 49.5520 23.0468 50.2187  c
23.7031 51.0520 24.0312 52.1822 24.0312 53.6093  c
24.0312 54.6093 23.8880 55.4583 23.6015 56.1562  c
23.3151 56.8541 22.9479 57.3619 22.5000 57.6796  c
22.0520 57.9974 21.6250 58.1562 21.2187 58.1562  c
20.3958 58.1562 19.7083 57.6718 19.1562 56.7031  c
18.6979 55.8802 18.4687 54.8958 18.4687 53.7500  c
h
19.7187 53.9062 m
19.7187 55.0937 19.8645 56.0625 20.1562 56.8125  c
20.3958 57.4375 20.7552 57.7500 21.2343 57.7500  c
21.4635 57.7500 21.7005 57.6484 21.9453 57.4453  c
22.1901 57.2421 22.3750 56.8958 22.5000 56.4062  c
22.6979 55.6875 22.7968 54.6614 22.7968 53.3281  c
22.7968 52.3489 22.6927 51.5312 22.4843 50.8750  c
22.3385 50.3854 22.1406 50.0416 21.8906 49.8437  c
21.7239 49.7083 21.5156 49.6406 21.2656 49.6406  c
20.9843 49.6406 20.7291 49.7656 20.5000 50.0156  c
20.1979 50.3697 19.9921 50.9244 19.8828 51.6796  c
19.7734 52.4349 19.7187 53.1770 19.7187 53.9062  c
h
26.1250 56.7656 m
26.3229 56.7656 26.4895 56.8359 26.6250 56.9765  c
26.7604 57.1171 26.8281 57.2812 26.8281 57.4687  c
26.8281 57.6666 26.7604 57.8333 26.6250 57.9687  c
26.4895 58.1041 26.3229 58.1718 26.1250 58.1718  c
25.9270 58.1718 25.7604 58.1041 25.6250 57.9687  c
25.4895 57.8333 25.4218 57.6666 25.4218 57.4687  c
25.4218 57.2708 25.4895 57.1041 25.6250 56.9687  c
25.7604 56.8333 25.9270 56.7656 26.1250 56.7656  c
h
30.2500 53.6718 m
29.5625 53.1093 29.1197 52.6588 28.9218 52.3203  c
28.7239 51.9817 28.6250 51.6302 28.6250 51.2656  c
28.6250 50.7031 28.8411 50.2213 29.2734 49.8203  c
29.7057 49.4192 30.2812 49.2187 31.0000 49.2187  c
31.6979 49.2187 32.2578 49.4062 32.6796 49.7812  c
33.1015 50.1562 33.3125 50.5833 33.3125 51.0625  c
33.3125 51.3854 33.1979 51.7135 32.9687 52.0468  c
32.7395 52.3802 32.2656 52.7760 31.5468 53.2343  c
32.2864 53.8072 32.7760 54.2604 33.0156 54.5937  c
33.3385 55.0208 33.5000 55.4739 33.5000 55.9531  c
33.5000 56.5572 33.2708 57.0755 32.8125 57.5078  c
32.3541 57.9401 31.7500 58.1562 31.0000 58.1562  c
30.1770 58.1562 29.5364 57.9010 29.0781 57.3906  c
28.7135 56.9739 28.5312 56.5208 28.5312 56.0312  c
28.5312 55.6562 28.6614 55.2812 28.9218 54.9062  c
29.1822 54.5312 29.6250 54.1197 30.2500 53.6718  c
h
31.2343 52.9843 m
31.7447 52.5260 32.0677 52.1640 32.2031 51.8984  c
32.3385 51.6328 32.4062 51.3333 32.4062 51.0000  c
32.4062 50.5625 32.2812 50.2161 32.0312 49.9609  c
31.7812 49.7057 31.4427 49.5781 31.0156 49.5781  c
30.5781 49.5781 30.2239 49.7031 29.9531 49.9531  c
29.6822 50.2031 29.5468 50.4947 29.5468 50.8281  c
29.5468 51.0468 29.6041 51.2682 29.7187 51.4921  c
29.8333 51.7161 29.9947 51.9270 30.2031 52.1250  c
31.2343 52.9843 l
h
30.5468 53.9062 m
30.1927 54.1979 29.9322 54.5182 29.7656 54.8671  c
29.5989 55.2161 29.5156 55.5937 29.5156 56.0000  c
29.5156 56.5520 29.6640 56.9921 29.9609 57.3203  c
30.2578 57.6484 30.6354 57.8125 31.0937 57.8125  c
31.5520 57.8125 31.9192 57.6822 32.1953 57.4218  c
32.4713 57.1614 32.6093 56.8489 32.6093 56.4843  c
32.6093 56.1822 32.5260 55.9062 32.3593 55.6562  c
32.0677 55.2083 31.4635 54.6250 30.5468 53.9062  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 356.338 m
34.0000 356.338 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 287.839 m
34.0000 287.839 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 219.340 m
34.0000 219.340 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 150.841 m
34.0000 150.841 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 82.3425 m
34.0000 82.3425 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
36.0000 13.8435 m
34.0000 13.8435 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
